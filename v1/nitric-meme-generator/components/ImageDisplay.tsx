import { useState, useEffect } from "react";
import { createPortal } from "react-dom";
import { Button } from "@/components/ui/button";
import { Download, ImageIcon, AlertCircle, Share } from "lucide-react";
import { Stopwatch } from "./Stopwatch";
import { cn } from "@/lib/utils";
import { drawImageWithText, imageHelpers } from "@/lib/image-helpers";
import { ProviderTiming } from "@/lib/image-types";
import { Label } from "@/components/ui/label";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "./ui/tooltip";

interface ImageDisplayProps {
  provider: string;
  image: string | null | undefined;
  timing?: ProviderTiming;
  failed?: boolean;
  fallbackIcon?: React.ReactNode;
  enabled?: boolean;
  modelId: string;
  topText?: string;
  bottomText?: string;
}

export function ImageDisplay({
  provider,
  image,
  timing,
  failed,
  fallbackIcon,
  modelId,
  topText = "",
  bottomText = "",
}: ImageDisplayProps) {
  const [isZoomed, setIsZoomed] = useState(false);

  useEffect(() => {
    if (isZoomed) {
      window.history.pushState({ zoomed: true }, "");
    }

    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === "Escape" && isZoomed) {
        setIsZoomed(false);
      }
    };

    const handlePopState = () => {
      if (isZoomed) {
        setIsZoomed(false);
      }
    };

    if (isZoomed) {
      document.addEventListener("keydown", handleEscape);
      window.addEventListener("popstate", handlePopState);
    }

    return () => {
      document.removeEventListener("keydown", handleEscape);
      window.removeEventListener("popstate", handlePopState);
    };
  }, [isZoomed]);

  const handleImageClick = (e: React.MouseEvent) => {
    if (image) {
      e.stopPropagation();
      setIsZoomed(true);
    }
  };

  const handleActionClick = async (
    e: React.MouseEvent,
    imageData: string,
    provider: string
  ) => {
    e.stopPropagation();

    try {
      // Convert base64 image to Blob with text
      const imageSrc = `data:image/png;base64,${imageData}`;
      const imageBlob = await drawImageWithText(imageSrc, topText, bottomText);

      // Download the image
      imageHelpers.downloadImage(imageBlob, provider);
    } catch (error) {
      console.error("Failed to draw text on image or download image:", error);
    }
  };

  const MemeText = ({
    text,
    position,
  }: {
    text?: string;
    position: "top" | "bottom";
  }) => {
    if (!text) return null;
    return (
      <div
        className={cn(
          "absolute left-0 right-0 text-center px-4",
          "font-bold text-white text-2xl sm:text-3xl uppercase tracking-wider",
          "break-words max-w-full mx-auto",
          "drop-shadow-[0_2px_2px_rgba(0,0,0,0.8)]",
          position === "top" ? "top-4" : "bottom-4"
        )}
      >
        {text}
      </div>
    );
  };

  return (
    <>
      <div
        className={cn(
          "relative w-full aspect-square group bg-zinc-50 rounded-lg",
          image && !failed && "cursor-pointer",
          (!image || failed) && "border-1 border-zinc-100"
        )}
        onClick={handleImageClick}
      >
        {(image || failed) && (
          <div className="absolute top-2 left-2 max-w-[75%] bg-white/95 px-2 py-1 flex items-center gap-2 rounded-lg z-10">
            <TooltipProvider>
              <Tooltip delayDuration={100}>
                <TooltipTrigger asChild>
                  <Label className="text-xs text-gray-900 truncate min-w-0 grow">
                    {imageHelpers.formatModelId(modelId)}
                  </Label>
                </TooltipTrigger>
                <TooltipContent>
                  <p>{modelId}</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        )}
        {image && !failed ? (
          <div className="relative w-full h-full">
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={`data:image/png;base64,${image}`}
              alt={`Generated by ${provider}`}
              className="w-full h-full object-cover rounded-lg"
            />
            <MemeText text={topText} position="top" />
            <MemeText text={bottomText} position="bottom" />
            <Button
              size="icon"
              variant="secondary"
              className="absolute bottom-2 left-2 sm:opacity-0 sm:group-hover:opacity-100 transition-opacity"
              onClick={(e) => handleActionClick(e, image, provider)}
            >
              <span className="sm:hidden">
                <Share className="h-4 w-4" />
              </span>
              <span className="hidden sm:block">
                <Download className="h-4 w-4" />
              </span>
            </Button>
            {timing?.elapsed && (
              <div className="absolute bottom-2 right-2 bg-black/70 backdrop-blur-sm rounded-md px-2 py-1 shadow">
                <span className="text-xs text-white/90 font-medium">
                  {(timing.elapsed / 1000).toFixed(1)}s
                </span>
              </div>
            )}
          </div>
        ) : (
          <div className="absolute inset-0 flex flex-col items-center justify-center">
            {failed ? (
              fallbackIcon || <AlertCircle className="h-8 w-8 text-red-500" />
            ) : timing?.startTime ? (
              <Stopwatch startTime={timing.startTime} />
            ) : (
              <ImageIcon className="h-12 w-12 text-zinc-300" />
            )}
          </div>
        )}
      </div>

      {isZoomed &&
        image &&
        createPortal(
          <div
            className="fixed inset-0 bg-black/90 z-50 flex items-center justify-center cursor-pointer min-h-[100dvh] w-screen"
            onClick={() => setIsZoomed(false)}
          >
            <div
              className="relative max-h-[90dvh] max-w-[90vw]"
              onClick={(e) => e.stopPropagation()}
            >
              {/* eslint-disable-next-line @next/next/no-img-element */}
              <img
                src={`data:image/png;base64,${image}`}
                alt={`Generated by ${provider}`}
                className="max-h-[90dvh] max-w-[90vw] object-contain"
              />
              <MemeText text={topText} position="top" />
              <MemeText text={bottomText} position="bottom" />
            </div>
          </div>,
          document.body
        )}
    </>
  );
}
